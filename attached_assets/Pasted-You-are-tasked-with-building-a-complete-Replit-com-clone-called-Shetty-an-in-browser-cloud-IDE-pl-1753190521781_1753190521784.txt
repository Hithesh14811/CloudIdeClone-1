You are tasked with building a complete Replit.com clone called “Shetty”, an in-browser cloud IDE platform that allows users to:

Edit code in real-time using a Monaco-based code editor.

Manage files, folders, and directories like a full project workspace.

Create and manage multiple user projects.

View live browser-based preview of the project.

Interact with an AI agent assistant to generate, debug, and modify code inside the project.

Run commands in a terminal console and view real-time logs/errors.

Allow both user and AI agent to collaboratively build apps.

This is not a simple app. I want you to create the entire fullstack system in one go, including:

🌐 FRONTEND (Client)
📦 Tech Stack:
React.js with TypeScript

TailwindCSS for styling

Monaco Editor for code editing

Socket.IO (or WebSocket) for terminal and live preview

axios or fetch API for HTTP requests

Shadcn/UI or your own component library for UI components

🧩 Key UI Components:
✅ Sidebar with collapsible File Tree view (folders, files, project structure)

✅ Topbar with:

Project name

Save button

Run button

File dropdown

AI Assistant button

✅ Main panel with 3 tabs:

📝 Editor Tab: Monaco editor view

👨‍💻 Agent Chat Tab: AI assistant interface

🌐 Webview Tab: Live preview (iFrame/browser rendering of the project)

✅ Terminal Console Panel below editor or in resizable panel

Live output of code

Shows errors or logs from stdout and stderr

✅ File Explorer on the left side:

Show full project structure

Allow: New file, New folder, Rename, Delete, Drag & Drop

🛠 Editor Features:
Monaco Editor in full power: syntax highlighting, autocomplete, themes

Open multiple files in tabs

Auto-save option (toggleable)

Read-only toggle (used by AI when showing suggestions)

Show line numbers, errors, etc.

🧠 AI ASSISTANT (Agent)
Lives in the "Agent Chat" tab.

Takes natural language prompts like:

"Build me a to-do app"

"Fix the error in app.js"

"Add a login form with Firebase"

The agent must:

Understand the request

Create/edit/delete files/folders in the project structure

Generate appropriate code

Explain what it did (optional)

AI should have full access to:

All files/folders

Current terminal logs

Errors or exceptions

Edits made by the AI should be visible in Monaco editor instantly

🖥 BACKEND (Server)
⚙️ Tech Stack:
Node.js + Express

Socket.IO for:

Live terminal connection

Live preview streaming

Docker Engine API to:

Spin up containers for each user/project

Run code safely in isolated environments

Redis (optional) for fast temp state or socket sessions

MongoDB for persistent storage (users, projects, file trees)

File I/O via fs module

📁 Backend Directory Structure:
pgsql
Copy
Edit
server/
├── routes/
│   ├── auth.js
│   ├── projects.js
│   └── files.js
├── services/
│   ├── docker.js         # Runs container, executes code
│   ├── aiAgent.js        # Logic to talk to AI model
│   ├── fileService.js    # Read/write user project files
├── models/
│   ├── User.js
│   └── Project.js
├── sockets/
│   └── terminal.js
├── utils/
│   └── fileTreeBuilder.js
├── app.js
└── Dockerfile
📦 USER PROJECT STORAGE
Each user has multiple projects.

Each project is stored as:

A root folder in a projects/ directory (on disk or in mounted volume)

Structure example:

pgsql
Copy
Edit
projects/
├── user123/
│   └── todo-app/
│       ├── index.html
│       ├── script.js
│       ├── style.css
│       └── package.json
File metadata and paths are also stored in MongoDB to display in frontend

🐳 DOCKER (Code Execution)
Each project runs inside its own Docker container

Container has:

Node.js, Python, and other required environments

nginx or live-server to serve preview

Terminal runs inside container

AI or user code is run via shell commands inside container

Example flow:

User/AI clicks Run

Backend zips project folder

Sends to Docker container

Docker executes:

Node: node index.js

Python: python main.py

Web: serve with live-server

Output streamed back to frontend via Socket.IO

🔁 LIVE PREVIEW PANEL
iFrame shows project output from the Docker container

Container exposes port (e.g., 3000), which is proxied back to frontend

Auto-refreshes when code or files are updated

🛡 AUTHENTICATION Basic signup/login

Each user has:

username, email, password (hashed)

projects[] with file tree and metadata

🧪 COMMAND EXAMPLES FOR TERMINAL
npm install

python app.py

node index.js

git init (eventually)

All terminal commands are executed in real-time inside user’s container.

🌍 DEPLOYMENT NOTES
Frontend: Can be deployed on Vercel or Netlify

Backend: Host on Render, Railway, or AWS EC2

Docker: Use Docker Compose during dev, real containers in prod

Use Nginx reverse proxy to route:

/api → Express backend

/preview/:port → Docker container exposed app

📚 OPTIONAL FEATURES (Phase 2)
File versioning / undo

GitHub import/export

Deploy-to-URL button

Live collaboration (like VSCode Live Share)

Auto-formatting, linting

Real-time syntax errors

Code completion AI (like Ghostwriter)

🚀 FINAL GOAL
Replit AI, you must now build this full-stack IDE platform from scratch, giving me:

The React-based frontend with all components prebuilt

The Node.js/Express backend with Docker execution

The Monaco editor working fully

The AI Agent Assistant connected and able to read/write files

The Terminal and Live Preview working perfectly

A working setup where:

I can edit or the AI can edit

I can run and preview the app

It behaves like Replit

📦 Everything should be structured, modular, and production-grade.

Please begin building it now.