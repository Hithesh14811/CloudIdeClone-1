I have already implemented a terminal, a file tree UI, and an auto-refresh system that refreshes the file structure every 2 seconds (to show live updates after commands like npx create-react-app).
However, there is one critical UX issue:
Whenever the file tree refreshes, any folders that the user had opened collapse again â€” ruining the experience.

I want you to fix this by making the file tree behave like VS Code:

If a folder is open, it should stay open after refresh

If itâ€™s closed, it should stay closed

The userâ€™s expanded/collapsed state should be remembered between each re-render

Do not change the existing design of the file tree UI

ðŸŽ¯ Your Task:
Make the file tree re-render every 2 seconds (or on backend file change events) without collapsing open folders. Keep the user experience smooth and persistent.

ðŸ”§ How to Implement:
âœ… 1. Track Folder Expansion State
Before refreshing the tree, store a list of folder paths that are currently open.
Example structure:

js
Copy
Edit
const expandedFolders = new Set(['/src', '/src/components'])
You can:

Assign each folder a data-path like data-path="/src/components"

Query all open folders (.folder.open) and store their paths in a Set

âœ… 2. Restore State After Refresh
When you rebuild the file tree:

Check if the current folder path exists in expandedFolders

If yes, render that folder in open state and render its children

âœ… 3. Update Refresh Flow
Wrap the refresh code like this:

js
Copy
Edit
setInterval(() => {
  captureExpandedState()      // Step 1: Save which folders are open
  fetchFileTree().then(tree => {
    renderFileTree(tree)      // Step 2: Re-render with open states preserved
  })
}, 2000)
âœ… 4. Restore State on Render
Each folderâ€™s element should:

Check if its path is in expandedFolders

Apply .open class accordingly

On click, toggle the folder open/closed and update the Set

This solution must work seamlessly with the backend WebSocket file updates or interval-based refresh

