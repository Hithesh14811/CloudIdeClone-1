Core Requirements:
UI Framework: Use xterm.js for the frontend terminal emulator.

Appearance: Match the look and feel of VS Code's integrated terminal. Include padding, font, background, scroll, cursor, and full-screen resize support.

Open terminal inside the current tab named Terminal without altering the existing UI design.

üöÄ Terminal Features to Include:
1. Frontend Setup (xterm.js)
Use xterm.js to render the terminal.

Initialize terminal in a <div id="terminal"> inside the Terminal tab section.

Enable:

Line input/output

Autoscroll

Clear screen (Ctrl+L)

Mouse support (optional)

Font resizing on window resize

2. Backend Setup (WebSocket + Shell)
Set up a Node.js backend server using express, ws, and node-pty.

Spawn a real shell process:

On Linux/macOS: bash

On Windows: powershell.exe

Relay input/output between xterm.js and shell using WebSockets.

WebSocket endpoint should be /terminal.

3. Multi-user and Session-safe
Each user session should:

Have its own WebSocket connection

Get an isolated shell process

Prevent one user from seeing/interacting with another user‚Äôs terminal

4. Security
Implement token or session-based authentication for the WebSocket.

Add command input validation to avoid abuse.

Optionally: run terminal inside a Docker container or chroot jail for true isolation.

5. Terminal Resize
Auto-resize terminal with browser window.

Send terminal dimensions (cols, rows) to backend via WebSocket and resize pty.

6. Copy/Paste Support
Enable copy/paste using keyboard shortcuts (Ctrl+C, Ctrl+V).

Support selection via mouse or keyboard.

7. Persistent Style
Match the theme to current IDE (dark/light mode).

Font and padding should match existing editor style.

üì¶ Libraries and Tools to Use:
Frontend:

xterm.js

HTML/JS or React/Vue (depending on my current IDE tech)

Backend:

express

ws

node-pty

Optional (for Dockerized shell):

Docker

Volume mount for per-project file persistence

üß™ Final Deliverable Must Include:
Fully functional terminal UI inside the IDE

Shell command support with real-time output

Secure backend with shell spawning

WebSocket wiring for bidirectional communication

Match existing file tree/editor layout

Resize and scroll support like VS Code

Multi-user safe and production-ready code

‚ùó Don‚Äôt:
Change any existing UI elements, layout, or colors.

Introduce unnecessary styles or external design libraries.

‚úÖ Example Behavior:
When I click the ‚ÄúTerminal‚Äù tab, the terminal opens at the bottom like in VS Code. I can type ls, npm install, or python3 script.py, and see live output. I can copy output, resize the browser, and the terminal adjusts accordingly. Every logged-in user has their own terminal instance securely connected to their own project folder.